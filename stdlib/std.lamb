(define id (λx. x))
(define const (λx. (λy. x)))

(define isZero (λn. (= n 0)))

(define double (λx. (+ x x)))
(define triple (λx. (+ x (double x))))

; Factorial
(define fact
  (λn.
    (if (= n 0)
        1
        (* n (fact (- n 1))))))

; Fibonacci
(define fib
  (λn.
    (if (< n 2)
        n
        (+ (fib (- n 1))
           (fib (- n 2))))))

; Mapping
(define map
  (λf.
    (λlst.
      (if (isNil lst)
          nil
          (cons
            (f (head lst))
            ((map f) (tail lst)))))))

(define filter
  (λpred.
    (λlst.
      (if (isNil lst)
          nil
          (let h (head lst)
            (let t ((filter pred) (tail lst))
              (if (pred h)
                  (cons h t)
                  t)))))))

(define foldl
  (λf. (λacc. (λlst.
    (if (isNil lst)
        acc
        ((foldl f) (f acc (head lst)) (tail lst)))))))

(define length
  (λlst.
    ((foldl (λn. (λm. (+ n 1))) 0) lst)))

(define reverse
  (λlst.
    ((foldl (λacc. (λx. (cons x acc))) nil) lst)))